import random
import time
import sys
import csv
from memory_profiler import profile

def evaluateSolution(data, solution):
    routeLength = 0
    for i in range(len(solution)):
        routeLength += data[solution[i - 1]][solution[i]]
    return routeLength

def getBestNeighbor(solution, data):
    ##Get the neighbors
    neighbors = []
    l=len(solution)
    for i in range(l):
        for j in range(i+1, l):
            n = solution.copy()
            n[i] = solution[j]
            n[j] = solution[i]
            neighbors.append(n)

    ##Get the best neighbor
    bestNeighbor = neighbors[0]
    bestLength = evaluateSolution(data, bestNeighbor)
    for neighbor in neighbors:
        routeLength = evaluateSolution(data, neighbor)
        if routeLength < bestLength:
            bestLength = routeLength
            bestNeighbor = neighbor
    return bestNeighbor, bestLength

#@profile
def hillClimbing(data):
    l=len(data)
    ##Create a random solution
    cities = list(range(l))
    solution = []
    for i in range(l):
        city = cities[random.randint(0, len(cities) - 1)]
        solution.append(city)
        cities.remove(city)
    routeLength = evaluateSolution(data, solution)

    ## print("Route length: ", routeLength) quitado que no afecte la E/S
    ##Get the best neighbor till no better neighbors can be obtained
    neighbor = getBestNeighbor(solution, data)
    while neighbor[1] < routeLength:
        solution = neighbor[0]
        routeLength = neighbor[1]
        ##print("Route length: ", routeLength)
        neighbor = getBestNeighbor(solution, data)

    return solution, routeLength

def main():
    
    data = [[0, 683, 527, 935, 69, 682, 757, 565, 375, 864, 147, 992, 846, 718, 223, 791, 757, 977, 779, 262, 311, 546, 283, 439, 359, 68, 637, 698, 439, 457, 458, 615, 261, 985, 104, 727, 799, 949, 148, 802, 897, 896, 225, 290, 667, 673, 90, 862, 842, 706] ,
[683, 0, 544, 276, 877, 665, 324, 682, 852, 142, 405, 721, 113, 954, 673, 979, 557, 696, 260, 183, 452, 703, 766, 109, 187, 114, 492, 970, 647, 918, 824, 36, 987, 196, 291, 409, 517, 746, 363, 949, 742, 550, 69, 295, 961, 149, 968, 77, 990, 757] ,
[527, 544, 0, 340, 712, 53, 613, 510, 975, 604, 499, 307, 548, 556, 36, 875, 755, 997, 109, 228, 438, 113, 417, 78, 444, 144, 860, 658, 378, 679, 552, 681, 154, 563, 366, 185, 461, 99, 844, 766, 478, 725, 547, 708, 433, 400, 239, 371, 197, 195] ,
[935, 276, 340, 0, 995, 241, 631, 621, 500, 788, 288, 568, 768, 913, 262, 448, 38, 686, 841, 341, 189, 401, 13, 411, 648, 580, 129, 674, 108, 560, 222, 218, 390, 47, 837, 210, 837, 566, 529, 78, 52, 644, 545, 881, 832, 137, 207, 38, 632, 552] ,
[69, 877, 712, 995, 0, 529, 613, 128, 793, 930, 183, 411, 800, 824, 145, 370, 955, 961, 389, 311, 132, 576, 80, 975, 497, 892, 618, 724, 491, 740, 802, 520, 586, 55, 151, 361, 679, 593, 691, 867, 756, 288, 271, 203, 420, 591, 45, 236, 678, 589] ,
[682, 665, 53, 241, 529, 0, 157, 965, 334, 380, 84, 138, 558, 751, 315, 963, 651, 970, 647, 253, 438, 16, 439, 356, 724, 882, 954, 49, 828, 532, 939, 370, 80, 354, 319, 393, 661, 265, 749, 953, 539, 388, 543, 263, 202, 284, 235, 758, 94, 619] ,
[757, 324, 613, 631, 613, 157, 0, 219, 695, 893, 633, 804, 892, 373, 919, 362, 208, 792, 350, 811, 281, 756, 221, 277, 912, 314, 849, 39, 15, 338, 804, 996, 595, 641, 917, 732, 75, 69, 833, 313, 333, 173, 950, 905, 17, 332, 319, 445, 725, 74] ,
[565, 682, 510, 621, 128, 965, 219, 0, 27, 722, 400, 750, 785, 19, 970, 879, 751, 676, 54, 517, 256, 814, 308, 194, 352, 699, 852, 440, 815, 103, 277, 574, 145, 263, 333, 318, 891, 425, 381, 225, 771, 604, 189, 715, 523, 320, 38, 539, 526, 474] ,
[375, 852, 975, 500, 793, 334, 695, 27, 0, 186, 380, 155, 275, 760, 577, 764, 272, 822, 955, 570, 253, 432, 827, 49, 883, 611, 352, 271, 424, 355, 638, 821, 18, 895, 191, 339, 912, 844, 226, 641, 400, 27, 328, 567, 451, 160, 729, 696, 757, 593] ,
[864, 142, 604, 788, 930, 380, 893, 722, 186, 0, 282, 818, 731, 986, 120, 684, 298, 891, 493, 824, 639, 406, 873, 286, 838, 376, 152, 482, 907, 30, 589, 849, 396, 140, 864, 913, 711, 956, 613, 502, 125, 521, 38, 826, 924, 468, 293, 342, 494, 874] ,
[147, 405, 499, 288, 183, 84, 633, 400, 380, 282, 0, 960, 947, 809, 67, 163, 925, 362, 360, 904, 561, 757, 279, 445, 595, 803, 278, 607, 282, 800, 782, 777, 412, 727, 336, 582, 594, 464, 638, 397, 557, 361, 75, 518, 292, 382, 811, 328, 790, 74] ,
[992, 721, 307, 568, 411, 138, 804, 750, 155, 818, 960, 0, 736, 433, 496, 596, 844, 285, 377, 545, 375, 739, 119, 652, 631, 562, 336, 396, 681, 18, 758, 476, 504, 284, 249, 947, 358, 460, 267, 743, 345, 461, 459, 165, 562, 164, 866, 224, 557, 213] ,
[846, 113, 548, 768, 800, 558, 892, 785, 275, 731, 947, 736, 0, 546, 311, 545, 749, 396, 958, 210, 725, 33, 200, 929, 571, 120, 681, 484, 980, 261, 273, 185, 104, 880, 353, 739, 372, 817, 117, 639, 475, 533, 773, 70, 959, 755, 851, 570, 130, 646] ,
[718, 954, 556, 913, 824, 751, 373, 19, 760, 986, 809, 433, 546, 0, 973, 659, 155, 632, 645, 248, 349, 806, 981, 27, 178, 299, 606, 232, 32, 670, 482, 175, 410, 158, 810, 277, 734, 549, 212, 243, 100, 22, 954, 897, 107, 261, 540, 599, 192, 272] ,
[223, 673, 36, 262, 145, 315, 919, 970, 577, 120, 67, 496, 311, 973, 0, 887, 505, 897, 348, 710, 358, 585, 214, 586, 794, 329, 373, 276, 523, 331, 877, 756, 222, 605, 545, 626, 652, 88, 729, 302, 879, 751, 895, 95, 706, 896, 705, 757, 979, 286] ,
[791, 979, 875, 448, 370, 963, 362, 879, 764, 684, 163, 596, 545, 659, 887, 0, 945, 232, 994, 224, 291, 961, 366, 182, 434, 734, 967, 331, 46, 273, 677, 376, 445, 329, 383, 677, 567, 245, 211, 997, 761, 28, 926, 369, 541, 585, 817, 621, 56, 387] ,
[757, 557, 755, 38, 955, 651, 208, 751, 272, 298, 925, 844, 749, 155, 505, 945, 0, 287, 828, 136, 557, 373, 228, 841, 467, 431, 345, 608, 196, 146, 118, 338, 354, 16, 58, 492, 327, 805, 738, 310, 691, 869, 823, 122, 616, 438, 615, 427, 713, 919] ,
[977, 696, 997, 686, 961, 970, 792, 676, 822, 891, 362, 285, 396, 632, 897, 232, 287, 0, 701, 618, 464, 735, 76, 375, 557, 946, 903, 809, 663, 521, 70, 349, 251, 92, 335, 664, 121, 95, 40, 902, 207, 989, 450, 362, 940, 739, 607, 194, 106, 405] ,
[779, 260, 109, 841, 389, 647, 350, 54, 955, 493, 360, 377, 958, 645, 348, 994, 828, 701, 0, 19, 356, 578, 996, 617, 700, 255, 431, 982, 563, 379, 352, 962, 507, 708, 673, 509, 907, 511, 791, 626, 493, 863, 678, 899, 264, 998, 720, 207, 609, 597] ,
[262, 183, 228, 341, 311, 253, 811, 517, 570, 824, 904, 545, 210, 248, 710, 224, 136, 618, 19, 0, 658, 523, 979, 86, 98, 419, 519, 84, 240, 736, 601, 894, 416, 499, 312, 354, 930, 467, 149, 661, 193, 288, 364, 232, 246, 336, 62, 851, 207, 977] ,
[311, 452, 438, 189, 132, 438, 281, 256, 253, 639, 561, 375, 725, 349, 358, 291, 557, 464, 356, 658, 0, 718, 483, 634, 568, 285, 573, 469, 20, 130, 392, 705, 589, 913, 443, 898, 877, 477, 165, 696, 468, 117, 555, 203, 188, 881, 97, 808, 72, 449] ,
[546, 703, 113, 401, 576, 16, 756, 814, 432, 406, 757, 739, 33, 806, 585, 961, 373, 735, 578, 523, 718, 0, 96, 805, 937, 441, 93, 152, 225, 987, 683, 417, 524, 951, 77, 942, 316, 109, 309, 563, 876, 371, 179, 979, 705, 163, 742, 757, 199, 487] ,
[283, 766, 417, 13, 80, 439, 221, 308, 827, 873, 279, 119, 200, 981, 214, 366, 228, 76, 996, 979, 483, 96, 0, 787, 708, 926, 866, 396, 481, 966, 778, 904, 242, 560, 842, 951, 564, 681, 547, 473, 169, 105, 279, 926, 467, 384, 344, 636, 682, 101] ,
[439, 109, 78, 411, 975, 356, 277, 194, 49, 286, 445, 652, 929, 27, 586, 182, 841, 375, 617, 86, 634, 805, 787, 0, 94, 683, 231, 956, 23, 753, 489, 657, 275, 580, 957, 302, 126, 183, 336, 374, 108, 910, 823, 178, 563, 407, 693, 339, 633, 213] ,
[359, 187, 444, 648, 497, 724, 912, 352, 883, 838, 595, 631, 571, 178, 794, 434, 467, 557, 700, 98, 568, 937, 708, 94, 0, 11, 683, 946, 507, 631, 961, 610, 546, 720, 958, 714, 809, 361, 204, 389, 392, 866, 360, 229, 195, 611, 877, 577, 362, 755] ,
[68, 114, 144, 580, 892, 882, 314, 699, 611, 376, 803, 562, 120, 299, 329, 734, 431, 946, 255, 419, 285, 441, 926, 683, 11, 0, 307, 959, 102, 386, 814, 163, 320, 971, 533, 602, 896, 143, 952, 220, 420, 979, 136, 212, 867, 358, 393, 107, 112, 629] ,
[637, 492, 860, 129, 618, 954, 849, 852, 352, 152, 278, 336, 681, 606, 373, 967, 345, 903, 431, 519, 573, 93, 866, 231, 683, 307, 0, 149, 414, 365, 705, 693, 471, 899, 513, 680, 284, 108, 372, 666, 267, 758, 116, 271, 892, 167, 719, 55, 947, 376] ,
[698, 970, 658, 674, 724, 49, 39, 440, 271, 482, 607, 396, 484, 232, 276, 331, 608, 809, 982, 84, 469, 152, 396, 956, 946, 959, 149, 0, 669, 991, 492, 814, 919, 780, 226, 388, 423, 426, 571, 767, 521, 327, 366, 613, 400, 13, 563, 492, 491, 365] ,
[439, 647, 378, 108, 491, 828, 15, 815, 424, 907, 282, 681, 980, 32, 523, 46, 196, 663, 563, 240, 20, 225, 481, 23, 507, 102, 414, 669, 0, 345, 318, 76, 358, 486, 573, 654, 755, 321, 82, 406, 268, 126, 121, 36, 957, 916, 792, 932, 168, 829] ,
[457, 918, 679, 560, 740, 532, 338, 103, 355, 30, 800, 18, 261, 670, 331, 273, 146, 521, 379, 736, 130, 987, 966, 753, 631, 386, 365, 991, 345, 0, 412, 441, 880, 966, 302, 768, 36, 392, 458, 128, 247, 165, 37, 490, 197, 451, 785, 104, 359, 639] ,
[458, 824, 552, 222, 802, 939, 804, 277, 638, 589, 782, 758, 273, 482, 877, 677, 118, 70, 352, 601, 392, 683, 778, 489, 961, 814, 705, 492, 318, 412, 0, 92, 233, 754, 115, 911, 68, 401, 271, 29, 620, 443, 992, 588, 900, 775, 102, 757, 276, 813] ,
[615, 36, 681, 218, 520, 370, 996, 574, 821, 849, 777, 476, 185, 175, 756, 376, 338, 349, 962, 894, 705, 417, 904, 657, 610, 163, 693, 814, 76, 441, 92, 0, 359, 590, 161, 267, 92, 591, 582, 206, 284, 160, 985, 516, 76, 596, 934, 897, 537, 263] ,
[261, 987, 154, 390, 586, 80, 595, 145, 18, 396, 412, 504, 104, 410, 222, 445, 354, 251, 507, 416, 589, 524, 242, 275, 546, 320, 471, 919, 358, 880, 233, 359, 0, 629, 566, 309, 632, 90, 292, 132, 315, 915, 816, 915, 293, 77, 711, 668, 856, 551] ,
[985, 196, 563, 47, 55, 354, 641, 263, 895, 140, 727, 284, 880, 158, 605, 329, 16, 92, 708, 499, 913, 951, 560, 580, 720, 971, 899, 780, 486, 966, 754, 590, 629, 0, 176, 360, 619, 947, 874, 858, 156, 784, 644, 836, 231, 846, 510, 854, 441, 983] ,
[104, 291, 366, 837, 151, 319, 917, 333, 191, 864, 336, 249, 353, 810, 545, 383, 58, 335, 673, 312, 443, 77, 842, 957, 958, 533, 513, 226, 573, 302, 115, 161, 566, 176, 0, 285, 594, 905, 854, 529, 250, 12, 322, 498, 410, 353, 191, 738, 175, 696] ,
[727, 409, 185, 210, 361, 393, 732, 318, 339, 913, 582, 947, 739, 277, 626, 677, 492, 664, 509, 354, 898, 942, 951, 302, 714, 602, 680, 388, 654, 768, 911, 267, 309, 360, 285, 0, 547, 694, 549, 825, 65, 310, 289, 719, 89, 787, 738, 71, 386, 125] ,
[799, 517, 461, 837, 679, 661, 75, 891, 912, 711, 594, 358, 372, 734, 652, 567, 327, 121, 907, 930, 877, 316, 564, 126, 809, 896, 284, 423, 755, 36, 68, 92, 632, 619, 594, 547, 0, 168, 183, 892, 611, 730, 908, 362, 138, 296, 872, 318, 732, 299] ,
[949, 746, 99, 566, 593, 265, 69, 425, 844, 956, 464, 460, 817, 549, 88, 245, 805, 95, 511, 467, 477, 109, 681, 183, 361, 143, 108, 426, 321, 392, 401, 591, 90, 947, 905, 694, 168, 0, 154, 919, 46, 345, 856, 409, 67, 137, 186, 778, 27, 244] ,
[148, 363, 844, 529, 691, 749, 833, 381, 226, 613, 638, 267, 117, 212, 729, 211, 738, 40, 791, 149, 165, 309, 547, 336, 204, 952, 372, 571, 82, 458, 271, 582, 292, 874, 854, 549, 183, 154, 0, 865, 530, 747, 508, 743, 407, 36, 51, 590, 534, 955] ,
[802, 949, 766, 78, 867, 953, 313, 225, 641, 502, 397, 743, 639, 243, 302, 997, 310, 902, 626, 661, 696, 563, 473, 374, 389, 220, 666, 767, 406, 128, 29, 206, 132, 858, 529, 825, 892, 919, 865, 0, 346, 511, 671, 823, 51, 958, 685, 635, 849, 281] ,
[897, 742, 478, 52, 756, 539, 333, 771, 400, 125, 557, 345, 475, 100, 879, 761, 691, 207, 493, 193, 468, 876, 169, 108, 392, 420, 267, 521, 268, 247, 620, 284, 315, 156, 250, 65, 611, 46, 530, 346, 0, 757, 453, 792, 230, 134, 188, 523, 562, 517] ,
[896, 550, 725, 644, 288, 388, 173, 604, 27, 521, 361, 461, 533, 22, 751, 28, 869, 989, 863, 288, 117, 371, 105, 910, 866, 979, 758, 327, 126, 165, 443, 160, 915, 784, 12, 310, 730, 345, 747, 511, 757, 0, 197, 499, 122, 290, 306, 460, 220, 667] ,
[225, 69, 547, 545, 271, 543, 950, 189, 328, 38, 75, 459, 773, 954, 895, 926, 823, 450, 678, 364, 555, 179, 279, 823, 360, 136, 116, 366, 121, 37, 992, 985, 816, 644, 322, 289, 908, 856, 508, 671, 453, 197, 0, 876, 995, 852, 508, 199, 354, 351] ,
[290, 295, 708, 881, 203, 263, 905, 715, 567, 826, 518, 165, 70, 897, 95, 369, 122, 362, 899, 232, 203, 979, 926, 178, 229, 212, 271, 613, 36, 490, 588, 516, 915, 836, 498, 719, 362, 409, 743, 823, 792, 499, 876, 0, 336, 814, 197, 74, 674, 581] ,
[667, 961, 433, 832, 420, 202, 17, 523, 451, 924, 292, 562, 959, 107, 706, 541, 616, 940, 264, 246, 188, 705, 467, 563, 195, 867, 892, 400, 957, 197, 900, 76, 293, 231, 410, 89, 138, 67, 407, 51, 230, 122, 995, 336, 0, 417, 610, 367, 535, 367] ,
[673, 149, 400, 137, 591, 284, 332, 320, 160, 468, 382, 164, 755, 261, 896, 585, 438, 739, 998, 336, 881, 163, 384, 407, 611, 358, 167, 13, 916, 451, 775, 596, 77, 846, 353, 787, 296, 137, 36, 958, 134, 290, 852, 814, 417, 0, 203, 252, 528, 496] ,
[90, 968, 239, 207, 45, 235, 319, 38, 729, 293, 811, 866, 851, 540, 705, 817, 615, 607, 720, 62, 97, 742, 344, 693, 877, 393, 719, 563, 792, 785, 102, 934, 711, 510, 191, 738, 872, 186, 51, 685, 188, 306, 508, 197, 610, 203, 0, 496, 929, 165] ,
[862, 77, 371, 38, 236, 758, 445, 539, 696, 342, 328, 224, 570, 599, 757, 621, 427, 194, 207, 851, 808, 757, 636, 339, 577, 107, 55, 492, 932, 104, 757, 897, 668, 854, 738, 71, 318, 778, 590, 635, 523, 460, 199, 74, 367, 252, 496, 0, 627, 678] ,
[842, 990, 197, 632, 678, 94, 725, 526, 757, 494, 790, 557, 130, 192, 979, 56, 713, 106, 609, 207, 72, 199, 682, 633, 362, 112, 947, 491, 168, 359, 276, 537, 856, 441, 175, 386, 732, 27, 534, 849, 562, 220, 354, 674, 535, 528, 929, 627, 0, 661] ,
[706, 757, 195, 552, 589, 619, 74, 474, 593, 874, 74, 213, 646, 272, 286, 387, 919, 405, 597, 977, 449, 487, 101, 213, 755, 629, 376, 365, 829, 639, 813, 263, 551, 983, 696, 125, 299, 244, 955, 281, 517, 667, 351, 581, 367, 496, 165, 678, 661, 0] ]

    
    start = time.time()

    iterations = 0
    # Código a medir
    for i in range(10):
        s=hillClimbing(data)
        iterations += 1
    # -------------

    end = time.time()

    endTime = end - start

    print(endTime)

    try:
        outputCSV = open('output_iterated_local_search.csv', 'a')
        fields = ['N Cities', 'Time', 'Length','Iterations']
        output = csv.DictWriter(outputCSV, fieldnames=fields)
        # output.writeheader() #- Use it only for the first time
        
        #for indice in range(6):
        #    salida.writerow({ 'Campo1':indice+1,
        #                     'Campo2':chr(ord('a') + indice)})
        output.writerow({ 'N Cities':len(s[0]),'Time':endTime,'Length':s[1],'Iterations':iterations})
                           
        output.writerow

    finally:
        outputCSV.close()

    print()
    print("--------------")
    print("Final solution: ",s[0])
    print("Final route length: ",s[1])

if __name__ == "__main__":
    main()
