import random
import time
import sys
import csv
from memory_profiler import profile

def evaluateSolution(data, solution):
    routeLength = 0
    for i in range(len(solution)):
        routeLength += data[solution[i - 1]][solution[i]]
    return routeLength

def getBestNeighbor(solution, data):
    ##Get the neighbors
    neighbors = []
    l=len(solution)
    for i in range(l):
        for j in range(i+1, l):
            n = solution.copy()
            n[i] = solution[j]
            n[j] = solution[i]
            neighbors.append(n)

    ##Get the best neighbor
    bestNeighbor = neighbors[0]
    bestLength = evaluateSolution(data, bestNeighbor)
    for neighbor in neighbors:
        routeLength = evaluateSolution(data, neighbor)
        if routeLength < bestLength:
            bestLength = routeLength
            bestNeighbor = neighbor
    return bestNeighbor, bestLength

@profile
def hillClimbing(data):
    l=len(data)
    ##Create a random solution
    cities = list(range(l))
    solution = []
    for i in range(l):
        city = cities[random.randint(0, len(cities) - 1)]
        solution.append(city)
        cities.remove(city)
    routeLength = evaluateSolution(data, solution)

    ## print("Route length: ", routeLength) quitado que no afecte la E/S
    ##Get the best neighbor till no better neighbors can be obtained
    neighbor = getBestNeighbor(solution, data)
    while neighbor[1] < routeLength:
        solution = neighbor[0]
        routeLength = neighbor[1]
        ##print("Route length: ", routeLength)
        neighbor = getBestNeighbor(solution, data)

    return solution, routeLength

def main():
    
    data = [
[0, 457, 334, 418, 502, 351, 201, 540, 959, 843, 749, 972, 489, 496, 298, 599, 20, 773, 959, 20, 17, 133, 676, 713, 454, 764, 605, 359, 185, 680] ,
[457, 0, 808, 692, 292, 183, 824, 321, 162, 196, 356, 197, 991, 194, 412, 486, 574, 385, 312, 865, 107, 440, 423, 528, 719, 124, 10, 694, 452, 393] ,
[334, 808, 0, 189, 465, 590, 968, 807, 937, 956, 654, 651, 494, 107, 583, 663, 367, 702, 312, 691, 236, 469, 742, 941, 973, 164, 898, 195, 545, 38] ,
[418, 692, 189, 0, 254, 741, 546, 350, 877, 120, 773, 207, 955, 537, 250, 95, 263, 795, 155, 694, 603, 402, 297, 58, 897, 700, 614, 711, 885, 973] ,
[502, 292, 465, 254, 0, 58, 795, 490, 345, 964, 51, 638, 399, 247, 934, 344, 325, 818, 88, 578, 983, 189, 13, 946, 310, 545, 443, 672, 212, 665] ,
[351, 183, 590, 741, 58, 0, 195, 428, 364, 817, 886, 663, 860, 574, 152, 140, 705, 763, 161, 451, 654, 616, 884, 880, 584, 643, 313, 565, 213, 874] ,
[201, 824, 968, 546, 795, 195, 0, 17, 490, 535, 741, 407, 242, 225, 190, 851, 771, 174, 543, 283, 126, 45, 447, 320, 253, 359, 244, 902, 194, 328] ,
[540, 321, 807, 350, 490, 428, 17, 0, 897, 485, 738, 240, 521, 767, 69, 979, 375, 197, 580, 54, 336, 973, 245, 584, 848, 546, 121, 94, 135, 709] ,
[959, 162, 937, 877, 345, 364, 490, 897, 0, 929, 230, 368, 175, 484, 443, 165, 107, 409, 465, 165, 108, 297, 25, 654, 457, 330, 667, 780, 39, 882] ,
[843, 196, 956, 120, 964, 817, 535, 485, 929, 0, 65, 378, 964, 844, 692, 485, 658, 197, 242, 171, 432, 727, 748, 466, 468, 16, 886, 164, 875, 937] ,
[749, 356, 654, 773, 51, 886, 741, 738, 230, 65, 0, 463, 461, 228, 587, 555, 171, 939, 659, 944, 145, 732, 309, 533, 640, 771, 775, 127, 330, 852] ,
[972, 197, 651, 207, 638, 663, 407, 240, 368, 378, 463, 0, 935, 921, 301, 14, 665, 674, 451, 165, 811, 545, 219, 656, 401, 880, 744, 344, 686, 884] ,
[489, 991, 494, 955, 399, 860, 242, 521, 175, 964, 461, 935, 0, 712, 528, 395, 218, 129, 436, 525, 450, 606, 210, 610, 754, 395, 586, 134, 154, 993] ,
[496, 194, 107, 537, 247, 574, 225, 767, 484, 844, 228, 921, 712, 0, 635, 872, 969, 647, 211, 367, 806, 793, 258, 544, 75, 103, 313, 17, 908, 270] ,
[298, 412, 583, 250, 934, 152, 190, 69, 443, 692, 587, 301, 528, 635, 0, 414, 48, 249, 944, 244, 723, 66, 899, 78, 779, 457, 536, 583, 858, 110] ,
[599, 486, 663, 95, 344, 140, 851, 979, 165, 485, 555, 14, 395, 872, 414, 0, 808, 287, 134, 389, 253, 764, 31, 271, 428, 641, 27, 194, 901, 738] ,
[20, 574, 367, 263, 325, 705, 771, 375, 107, 658, 171, 665, 218, 969, 48, 808, 0, 295, 965, 600, 633, 100, 737, 438, 681, 853, 828, 86, 747, 114] ,
[773, 385, 702, 795, 818, 763, 174, 197, 409, 197, 939, 674, 129, 647, 249, 287, 295, 0, 898, 479, 723, 215, 903, 753, 893, 208, 197, 400, 467, 568] ,
[959, 312, 312, 155, 88, 161, 543, 580, 465, 242, 659, 451, 436, 211, 944, 134, 965, 898, 0, 104, 568, 404, 902, 232, 634, 779, 967, 444, 490, 772] ,
[20, 865, 691, 694, 578, 451, 283, 54, 165, 171, 944, 165, 525, 367, 244, 389, 600, 479, 104, 0, 58, 342, 629, 582, 595, 174, 455, 840, 825, 616] ,
[17, 107, 236, 603, 983, 654, 126, 336, 108, 432, 145, 811, 450, 806, 723, 253, 633, 723, 568, 58, 0, 429, 841, 217, 484, 401, 338, 386, 813, 690] ,
[133, 440, 469, 402, 189, 616, 45, 973, 297, 727, 732, 545, 606, 793, 66, 764, 100, 215, 404, 342, 429, 0, 915, 74, 236, 758, 467, 788, 721, 376] ,
[676, 423, 742, 297, 13, 884, 447, 245, 25, 748, 309, 219, 210, 258, 899, 31, 737, 903, 902, 629, 841, 915, 0, 36, 39, 826, 539, 432, 240, 150] ,
[713, 528, 941, 58, 946, 880, 320, 584, 654, 466, 533, 656, 610, 544, 78, 271, 438, 753, 232, 582, 217, 74, 36, 0, 220, 716, 35, 611, 378, 545] ,
[454, 719, 973, 897, 310, 584, 253, 848, 457, 468, 640, 401, 754, 75, 779, 428, 681, 893, 634, 595, 484, 236, 39, 220, 0, 482, 907, 528, 232, 74] ,
[764, 124, 164, 700, 545, 643, 359, 546, 330, 16, 771, 880, 395, 103, 457, 641, 853, 208, 779, 174, 401, 758, 826, 716, 482, 0, 881, 804, 275, 897] ,
[605, 10, 898, 614, 443, 313, 244, 121, 667, 886, 775, 744, 586, 313, 536, 27, 828, 197, 967, 455, 338, 467, 539, 35, 907, 881, 0, 698, 782, 400] ,
[359, 694, 195, 711, 672, 565, 902, 94, 780, 164, 127, 344, 134, 17, 583, 194, 86, 400, 444, 840, 386, 788, 432, 611, 528, 804, 698, 0, 102, 78] ,
[185, 452, 545, 885, 212, 213, 194, 135, 39, 875, 330, 686, 154, 908, 858, 901, 747, 467, 490, 825, 813, 721, 240, 378, 232, 275, 782, 102, 0, 905] ,
[680, 393, 38, 973, 665, 874, 328, 709, 882, 937, 852, 884, 993, 270, 110, 738, 114, 568, 772, 616, 690, 376, 150, 545, 74, 897, 400, 78, 905, 0] ]

    
    start = time.time()

    iterations = 0
    # CÃ³digo a medir
    for i in range(10):
        s=hillClimbing(data)
        iterations += 1
    # -------------

    end = time.time()

    endTime = end - start

    print(endTime)

    try:
        outputCSV = open('output_iterated_local_search.csv', 'a')
        fields = ['N Cities', 'Time', 'Length','Iterations']
        output = csv.DictWriter(outputCSV, fieldnames=fields)
        # output.writeheader() #- Use it only for the first time
        
        #for indice in range(6):
        #    salida.writerow({ 'Campo1':indice+1,
        #                     'Campo2':chr(ord('a') + indice)})
        output.writerow({ 'N Cities':len(s[0]),'Time':endTime,'Length':s[1],'Iterations':iterations})
                           
        output.writerow

    finally:
        outputCSV.close()

    print()
    print("--------------")
    print("Final solution: ",s[0])
    print("Final route length: ",s[1])

if __name__ == "__main__":
    main()
